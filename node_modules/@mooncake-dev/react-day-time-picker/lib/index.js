"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _dateFns = _interopRequireDefault(require("date-fns"));

var _styledComponents = require("styled-components");

var _Popup = require("./Popup");

var _Confirm = require("./Confirm");

var _Icons = require("./Icons");

var _Feedback = require("./Feedback");

var _calendar = _interopRequireDefault(require("./calendar"));

var _timeSlots = _interopRequireDefault(require("./time-slots"));

var _validators = require("./validators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function DayTimePicker(_ref) {
  var timeSlotValidator = _ref.timeSlotValidator,
      timeSlotSizeMinutes = _ref.timeSlotSizeMinutes,
      isLoading = _ref.isLoading,
      isDone = _ref.isDone,
      err = _ref.err,
      onConfirm = _ref.onConfirm,
      confirmText = _ref.confirmText,
      loadingText = _ref.loadingText,
      doneText = _ref.doneText,
      theme = _ref.theme;

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      pickedDay = _useState2[0],
      setPickedDay = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      pickedTime = _useState4[0],
      setPickedTime = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = _slicedToArray(_useState5, 2),
      showPickTime = _useState6[0],
      setShowPickTime = _useState6[1];

  var _useState7 = (0, _react.useState)(false),
      _useState8 = _slicedToArray(_useState7, 2),
      showConfirm = _useState8[0],
      setShowConfirm = _useState8[1];

  var handlePickDay = function handlePickDay(day) {
    setPickedDay(day);
    setShowPickTime(true);
  };

  var handlePickTime = function handlePickTime(time) {
    setPickedTime(time);
    setShowPickTime(false);
    setShowConfirm(true);
  };

  var handleClosePickTime = function handleClosePickTime() {
    setShowPickTime(false);
  };

  var handleConfirm = function handleConfirm() {
    onConfirm(pickedTime);
  };

  var handleCloseConfirm = function handleCloseConfirm() {
    setShowConfirm(false);
    setShowPickTime(true);
  };

  return _react["default"].createElement(_styledComponents.ThemeProvider, {
    theme: theme
  }, _react["default"].createElement(_Popup.PopupWrapper, null, _react["default"].createElement(_calendar["default"], {
    validator: _validators.preventPastDays,
    pickDay: handlePickDay
  }), showPickTime && _react["default"].createElement(_Popup.Popup, null, _react["default"].createElement(_Popup.PopupHeader, null, _react["default"].createElement("p", null, _react["default"].createElement(_Icons.DayIcon, null), " ", _dateFns["default"].format(pickedDay, 'dddd, MMMM Do, YYYY')), _react["default"].createElement("p", null, _react["default"].createElement(_Popup.PopupClose, {
    onClick: handleClosePickTime
  }, "Go Back"))), _react["default"].createElement(_timeSlots["default"], {
    pickedDay: pickedDay,
    slotSizeMinutes: timeSlotSizeMinutes,
    validator: timeSlotValidator,
    pickTime: handlePickTime
  })), showConfirm && _react["default"].createElement(_Popup.Popup, null, _react["default"].createElement(_Popup.PopupHeader, null, _react["default"].createElement("p", null, _react["default"].createElement(_Icons.DayIcon, null), " ", _dateFns["default"].format(pickedTime, 'dddd, MMMM Do, YYYY')), _react["default"].createElement("p", null, _react["default"].createElement(_Icons.ClockIcon, null), " ", _dateFns["default"].format(pickedTime, 'HH:mm')), !isDone && _react["default"].createElement("p", null, _react["default"].createElement(_Popup.PopupClose, {
    disabled: isLoading,
    onClick: handleCloseConfirm
  }, "Go Back"))), !isDone ? _react["default"].createElement(_Confirm.ConfirmButton, {
    disabled: isLoading,
    onClick: handleConfirm
  }, isLoading ? loadingText : confirmText) : doneText ? _react["default"].createElement(_Feedback.Success, null, _react["default"].createElement("p", null, _react["default"].createElement(_Icons.SuccessIcon, null), " ", doneText)) : null, err && _react["default"].createElement(_Feedback.Failed, null, _react["default"].createElement("p", null, _react["default"].createElement(_Icons.FailedIcon, null), " ", err)))));
}

DayTimePicker.propTypes = {
  timeSlotValidator: _propTypes["default"].func,
  timeSlotSizeMinutes: _propTypes["default"].number.isRequired,
  isLoading: _propTypes["default"].bool.isRequired,
  isDone: _propTypes["default"].bool.isRequired,
  err: _propTypes["default"].string,
  onConfirm: _propTypes["default"].func.isRequired,
  confirmText: _propTypes["default"].string,
  loadingText: _propTypes["default"].string,
  doneText: _propTypes["default"].string,
  theme: _propTypes["default"].shape({
    primary: _propTypes["default"].string,
    secondary: _propTypes["default"].string,
    background: _propTypes["default"].string,
    buttons: _propTypes["default"].shape({
      disabled: _propTypes["default"].shape({
        color: _propTypes["default"].string,
        background: _propTypes["default"].string
      }),
      confirm: _propTypes["default"].shape({
        color: _propTypes["default"].string,
        background: _propTypes["default"].string,
        hover: _propTypes["default"].shape({
          color: _propTypes["default"].string,
          background: _propTypes["default"].string
        })
      })
    })
  })
};
DayTimePicker.defaultProps = {
  confirmText: 'Schedule',
  loadingText: 'Scheduling..',
  doneText: 'Your event has been scheduled!',
  theme: {
    primary: '#3a9ad9',
    secondary: '#f0f0f0',
    background: '#fff',
    buttons: {
      disabled: {
        color: '#333',
        background: '#dfdfdf'
      },
      confirm: {
        color: '#fff',
        background: '#3a9ad9',
        hover: {
          color: '',
          background: '#3a9ad9d6'
        }
      }
    },
    feedback: {
      success: {
        color: '#29aba4'
      },
      failed: {
        color: '#eb7260'
      }
    }
  }
};
var _default = DayTimePicker;
exports["default"] = _default;